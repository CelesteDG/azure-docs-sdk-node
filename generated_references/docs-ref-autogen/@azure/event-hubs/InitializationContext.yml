### YamlMime:UniversalReference
items:
  - uid: '@azure/event-hubs.InitializationContext'
    name: InitializationContext
    fullName: InitializationContext
    children:
      - '@azure/event-hubs.InitializationContext.consumerGroup'
      - '@azure/event-hubs.InitializationContext.eventHubName'
      - '@azure/event-hubs.InitializationContext.fullyQualifiedNamespace'
      - '@azure/event-hubs.InitializationContext.lastEnqueuedEventProperties'
      - '@azure/event-hubs.InitializationContext.partitionId'
      - '@azure/event-hubs.InitializationContext.setStartingPosition'
      - '@azure/event-hubs.InitializationContext.updateCheckpoint'
    langs:
      - typeScript
    type: interface
    summary: |-
      A `PartitionContext` with the ability to also provide a default start
      position if no checkpoint is found.
    extends:
      name: '@azure/event-hubs.PartitionContext'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.InitializationContext.consumerGroup'
    name: consumerGroup
    fullName: consumerGroup
    children: []
    langs:
      - typeScript
    type: property
    summary: The consumer group name.
    syntax:
      content: 'consumerGroup: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.InitializationContext.eventHubName'
    name: eventHubName
    fullName: eventHubName
    children: []
    langs:
      - typeScript
    type: property
    summary: The event hub name.
    syntax:
      content: 'eventHubName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.InitializationContext.fullyQualifiedNamespace'
    name: fullyQualifiedNamespace
    fullName: fullyQualifiedNamespace
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      The fully qualified Event Hubs namespace. This is likely to be similar to
      <yournamespace>.servicebus.windows.net
    syntax:
      content: 'fullyQualifiedNamespace: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.InitializationContext.lastEnqueuedEventProperties'
    name: lastEnqueuedEventProperties
    fullName: lastEnqueuedEventProperties
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Information on the last enqueued event in the partition that is being
      processed.

      This property is only updated if the `trackLastEnqueuedEventProperties`
      option is set to true

      when creating an instance of EventProcessor.
    optional: true
    syntax:
      content: 'lastEnqueuedEventProperties?: LastEnqueuedEventProperties'
      return:
        type:
          - '@azure/event-hubs.LastEnqueuedEventProperties'
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.InitializationContext.partitionId'
    name: partitionId
    fullName: partitionId
    children: []
    langs:
      - typeScript
    type: property
    summary: The identifier of the Event Hub partition.
    syntax:
      content: 'partitionId: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.InitializationContext.setStartingPosition'
    name: setStartingPosition(EventPosition)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Allows for setting the start position of a partition.
      Default (if not called) is `EventPosition.earliest()`.
    syntax:
      content: 'function setStartingPosition(startingPosition: EventPosition)'
      parameters:
        - id: startingPosition
          type:
            - '@azure/event-hubs.EventPosition'
          description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.InitializationContext.updateCheckpoint'
    name: updateCheckpoint(ReceivedEventData)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Updates the checkpoint using the event data.

      A checkpoint is meant to represent the last successfully processed event
      by the user from a particular

      partition of a consumer group in an Event Hub instance.
    syntax:
      content: 'function updateCheckpoint(eventData: ReceivedEventData)'
      parameters:
        - id: eventData
          type:
            - '@azure/event-hubs.ReceivedEventData'
          description: The event that you want to update the checkpoint with.
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/event-hubs'
references:
  - uid: '@azure/event-hubs.PartitionContext'
    name: PartitionContext
    spec.typeScript:
      - name: PartitionContext
        fullName: PartitionContext
        uid: '@azure/event-hubs.PartitionContext'
  - uid: '@azure/event-hubs.LastEnqueuedEventProperties'
    name: LastEnqueuedEventProperties
    spec.typeScript:
      - name: LastEnqueuedEventProperties
        fullName: LastEnqueuedEventProperties
        uid: '@azure/event-hubs.LastEnqueuedEventProperties'
  - uid: '@azure/event-hubs.EventPosition'
    name: EventPosition
    spec.typeScript:
      - name: EventPosition
        fullName: EventPosition
        uid: '@azure/event-hubs.EventPosition'
  - uid: '@azure/event-hubs.ReceivedEventData'
    name: ReceivedEventData
    spec.typeScript:
      - name: ReceivedEventData
        fullName: ReceivedEventData
        uid: '@azure/event-hubs.ReceivedEventData'
