### YamlMime:UniversalReference
items:
  - uid: '@azure/event-hubs.EventHubProducerClient'
    name: EventHubProducerClient
    fullName: EventHubProducerClient
    children:
      - '@azure/event-hubs.EventHubProducerClient.close'
      - '@azure/event-hubs.EventHubProducerClient.createBatch'
      - '@azure/event-hubs.EventHubProducerClient.eventHubName'
      - '@azure/event-hubs.EventHubProducerClient.constructor'
      - '@azure/event-hubs.EventHubProducerClient.constructor_1'
      - '@azure/event-hubs.EventHubProducerClient.constructor_2'
      - '@azure/event-hubs.EventHubProducerClient.fullyQualifiedNamespace'
      - '@azure/event-hubs.EventHubProducerClient.getEventHubProperties'
      - '@azure/event-hubs.EventHubProducerClient.getPartitionIds'
      - '@azure/event-hubs.EventHubProducerClient.getPartitionProperties'
      - '@azure/event-hubs.EventHubProducerClient.sendBatch'
    langs:
      - typeScript
    type: class
    summary: >+
      The client is the main point of interaction with Azure Event Hubs service.

      It offers connection to a specific Event Hub within the Event Hubs
      namespace along with

      operations for sending event data and inspecting the connected Event Hub.

      There are multiple ways to create an `EventHubProducerClient`

      - Use the connection string from the SAS policy created for your Event Hub
      instance.

      - Use the connection string from the SAS policy created for your Event Hub
      namespace,

      and the name of the Event Hub instance

      - Use the fully qualified domain name of your Event Hub namespace like
      `<yournamespace>.servicebus.windows.net`,

      and a credentials object.

    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP connection to the Event Hub instance,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.createBatch'
    name: createBatch(CreateBatchOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an instance of `EventDataBatch` to which one can add events until
      the maximum supported size is reached.

      The batch can be passed to the <xref:sendBatch> method of the
      `EventHubProducerClient` to be sent to Azure Event Hubs.
    syntax:
      content: 'function createBatch(options?: CreateBatchOptions)'
      parameters:
        - id: options
          type:
            - '@azure/event-hubs.CreateBatchOptions'
          description: >-
            A set of options to configure the behavior of the batch.

            - `partitionKey`  : A value that is hashed to produce a partition
            assignment.

            Not applicable if the `EventHubProducer` was created using a
            `partitionId`.

            - `maxSizeInBytes`: The upper limit for the size of batch. The
            `tryAdd` function will return `false` after this limit is reached.

            - `abortSignal`   : A signal the request to cancel the operation.
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.EventDataBatch>
        description: Promise<EventDataBatch>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.eventHubName'
    name: eventHubName
    fullName: eventHubName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'eventHubName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.constructor'
    name: 'EventHubProducerClient(string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubProducerClient(connectionString: string, options?:
        EventHubClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `dataTransformer`: A set of `encode`/`decode` methods to be used
            to encode an event before sending to service

            and to decode the event received from the service

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `websocket`      : The WebSocket constructor used to create an
            AMQP connection if you choose to make the connection

            over a WebSocket.

            - `webSocketConstructorOptions` : Options to pass to the Websocket
            constructor when you choose to make the connection

            over a WebSocket.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.constructor_1'
    name: 'EventHubProducerClient(string, string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubProducerClient(connectionString: string, eventHubName:
        string, options?: EventHubClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: eventHubName
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `dataTransformer`: A set of `encode`/`decode` methods to be used
            to encode an event before sending to service

            and to decode the event received from the service

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `websocket`      : The WebSocket constructor used to create an
            AMQP connection if you choose to make the connection

            over a WebSocket.

            - `webSocketConstructorOptions` : Options to pass to the Websocket
            constructor when you choose to make the connection

            over a WebSocket.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.constructor_2'
    name: >-
      EventHubProducerClient(string, string, TokenCredential,
      EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubProducerClient(fullyQualifiedNamespace: string,
        eventHubName: string, credential: TokenCredential, options?:
        EventHubClientOptions)
      parameters:
        - id: fullyQualifiedNamespace
          type:
            - string
          description: ''
        - id: eventHubName
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: credential
          type:
            - TokenCredential
          description: >-
            SharedKeyCredential object or your credential that implements the
            TokenCredential interface.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `dataTransformer`: A set of `encode`/`decode` methods to be used
            to encode an event before sending to service

            and to decode the event received from the service

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `websocket`      : The WebSocket constructor used to create an
            AMQP connection if you choose to make the connection

            over a WebSocket.

            - `webSocketConstructorOptions` : Options to pass to the Websocket
            constructor when you choose to make the connection

            over a WebSocket.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.fullyQualifiedNamespace'
    name: fullyQualifiedNamespace
    fullName: fullyQualifiedNamespace
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'fullyQualifiedNamespace: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.getEventHubProperties'
    name: getEventHubProperties(GetEventHubPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the Event Hub runtime information.
    syntax:
      content: 'function getEventHubProperties(options?: GetEventHubPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/event-hubs.GetEventHubPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.EventHubProperties>
        description: A promise that resolves with EventHubProperties.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.getPartitionIds'
    name: getPartitionIds(GetPartitionIdsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides an array of partitionIds.
    syntax:
      content: 'function getPartitionIds(options?: GetPartitionIdsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/event-hubs.GetPartitionIdsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Array<string>>
        description: A promise that resolves with an Array of strings.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.getPartitionProperties'
    name: 'getPartitionProperties(string, GetPartitionPropertiesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides information about the specified partition.
    syntax:
      content: >-
        function getPartitionProperties(partitionId: string, options?:
        GetPartitionPropertiesOptions)
      parameters:
        - id: partitionId
          type:
            - string
          description: Partition ID for which partition information is required.
        - id: options
          type:
            - '@azure/event-hubs.GetPartitionPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.PartitionProperties>
        description: A promise that resoloves with PartitionProperties.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubProducerClient.sendBatch'
    name: 'sendBatch(EventDataBatch, SendBatchOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a batch of events to the associated Event Hub.
    syntax:
      content: 'function sendBatch(batch: EventDataBatch, options?: SendBatchOptions)'
      parameters:
        - id: batch
          type:
            - '@azure/event-hubs.EventDataBatch'
          description: >-
            An instance of `EventDataBatch` that you can create using the
            <xref:createBatch> method.
        - id: options
          type:
            - '@azure/event-hubs.SendBatchOptions'
          description: >
            The set of options that can be specified to influence the way in
            which

            events are sent to the associated Event Hub.

            - `abortSignal`  : A signal the request to cancel the send
            operation.
          optional: true
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/event-hubs'
references:
  - uid: '@azure/event-hubs.EventHubClientOptions'
    name: EventHubClientOptions
    spec.typeScript:
      - name: EventHubClientOptions
        fullName: EventHubClientOptions
        uid: '@azure/event-hubs.EventHubClientOptions'
  - uid: '@azure/event-hubs.CreateBatchOptions'
    name: CreateBatchOptions
    spec.typeScript:
      - name: CreateBatchOptions
        fullName: CreateBatchOptions
        uid: '@azure/event-hubs.CreateBatchOptions'
  - uid: Promise<@azure/event-hubs.EventDataBatch>
    name: EventDataBatch>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventDataBatch
        fullName: EventDataBatch
        uid: '@azure/event-hubs.EventDataBatch'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.GetEventHubPropertiesOptions'
    name: GetEventHubPropertiesOptions
    spec.typeScript:
      - name: GetEventHubPropertiesOptions
        fullName: GetEventHubPropertiesOptions
        uid: '@azure/event-hubs.GetEventHubPropertiesOptions'
  - uid: Promise<@azure/event-hubs.EventHubProperties>
    name: EventHubProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubProperties
        fullName: EventHubProperties
        uid: '@azure/event-hubs.EventHubProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.GetPartitionIdsOptions'
    name: GetPartitionIdsOptions
    spec.typeScript:
      - name: GetPartitionIdsOptions
        fullName: GetPartitionIdsOptions
        uid: '@azure/event-hubs.GetPartitionIdsOptions'
  - uid: '@azure/event-hubs.GetPartitionPropertiesOptions'
    name: GetPartitionPropertiesOptions
    spec.typeScript:
      - name: GetPartitionPropertiesOptions
        fullName: GetPartitionPropertiesOptions
        uid: '@azure/event-hubs.GetPartitionPropertiesOptions'
  - uid: Promise<@azure/event-hubs.PartitionProperties>
    name: PartitionProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PartitionProperties
        fullName: PartitionProperties
        uid: '@azure/event-hubs.PartitionProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.EventDataBatch'
    name: EventDataBatch
    spec.typeScript:
      - name: EventDataBatch
        fullName: EventDataBatch
        uid: '@azure/event-hubs.EventDataBatch'
  - uid: '@azure/event-hubs.SendBatchOptions'
    name: SendBatchOptions
    spec.typeScript:
      - name: SendBatchOptions
        fullName: SendBatchOptions
        uid: '@azure/event-hubs.SendBatchOptions'
