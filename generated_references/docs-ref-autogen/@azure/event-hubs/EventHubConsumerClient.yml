### YamlMime:UniversalReference
items:
  - uid: '@azure/event-hubs.EventHubConsumerClient'
    name: EventHubConsumerClient
    fullName: EventHubConsumerClient
    children:
      - '@azure/event-hubs.EventHubConsumerClient.close'
      - '@azure/event-hubs.EventHubConsumerClient.defaultConsumerGroupName'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_1'
      - '@azure/event-hubs.EventHubConsumerClient.constructor'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_3'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_2'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_5'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_4'
      - '@azure/event-hubs.EventHubConsumerClient.getEventHubProperties'
      - '@azure/event-hubs.EventHubConsumerClient.getPartitionIds'
      - '@azure/event-hubs.EventHubConsumerClient.getPartitionProperties'
      - '@azure/event-hubs.EventHubConsumerClient.subscribe_1'
      - '@azure/event-hubs.EventHubConsumerClient.subscribe'
    langs:
      - typeScript
    type: class
    summary: >
      The `EventHubConsumerClient` is the main point of interaction for
      consuming events in Azure Event Hubs service.

      There are multiple ways to create an `EventHubConsumerClient`

      - Use the connection string from the SAS policy created for your Event Hub
      instance.

      - Use the connection string from the SAS policy created for your Event Hub
      namespace,

      and the name of the Event Hub instance

      - Use the fully qualified domain name of your Event Hub namespace like
      `<yournamespace>.servicebus.windows.net`,

      and a credentials object.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP connection to the Event Hub instance,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.defaultConsumerGroupName'
    name: defaultConsumerGroupName
    fullName: defaultConsumerGroupName
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the default consumer group in the Event Hubs service.
    syntax:
      content: 'static defaultConsumerGroupName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_1'
    name: >-
      EventHubConsumerClient(string, string, CheckpointStore,
      EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, checkpointStore: CheckpointStore, options?:
        EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: checkpointStore
          type:
            - '@azure/event-hubs.CheckpointStore'
          description: >-
            An instance of `CheckpointStore`. See
            &commat;azure/eventhubs-checkpointstore-blob for a
             production-ready implementation.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.

            - `webSocketOptions`: Options for the websocket implementation used
            for AMQP.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor'
    name: 'EventHubConsumerClient(string, string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, options?: EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.

            - `webSocketOptions`: Options for the websocket implementation used
            for AMQP.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_3'
    name: >-
      EventHubConsumerClient(string, string, string, CheckpointStore,
      EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, eventHubName: string, checkpointStore: CheckpointStore,
        options?: EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: eventHubName
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: checkpointStore
          type:
            - '@azure/event-hubs.CheckpointStore'
          description: >-
            An instance of `CheckpointStore`. See
            &commat;azure/eventhubs-checkpointstore-blob for a
             production-ready implementation.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.

            - `webSocketOptions`: Options for the websocket implementation used
            for AMQP.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_2'
    name: 'EventHubConsumerClient(string, string, string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string, connectionString:
        string, eventHubName: string, options?: EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: eventHubName
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.

            - `webSocketOptions`: Options for the websocket implementation used
            for AMQP.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_5'
    name: >-
      EventHubConsumerClient(string, string, string, TokenCredential,
      CheckpointStore, EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string,
        fullyQualifiedNamespace: string, eventHubName: string, credential:
        TokenCredential, checkpointStore: CheckpointStore, options?:
        EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: fullyQualifiedNamespace
          type:
            - string
          description: >-
            The fully qualified host name for the Event Hubs namespace. This is
            likely to be similar to

            <yournamespace>.servicebus.windows.net
        - id: eventHubName
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: credential
          type:
            - TokenCredential
          description: >-
            SharedKeyCredential object or your credential that implements the
            TokenCredential interface.
        - id: checkpointStore
          type:
            - '@azure/event-hubs.CheckpointStore'
          description: >-
            An instance of `CheckpointStore`. See
            &commat;azure/eventhubs-checkpointstore-blob for a
             production-ready implementation.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.

            - `webSocketOptions`: Options for the websocket implementation used
            for AMQP.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_4'
    name: >-
      EventHubConsumerClient(string, string, string, TokenCredential,
      EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(consumerGroup: string,
        fullyQualifiedNamespace: string, eventHubName: string, credential:
        TokenCredential, options?: EventHubClientOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: fullyQualifiedNamespace
          type:
            - string
          description: >-
            The fully qualified host name for the Event Hubs namespace. This is
            likely to be similar to

            <yournamespace>.servicebus.windows.net
        - id: eventHubName
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: credential
          type:
            - TokenCredential
          description: >-
            SharedKeyCredential object or your credential that implements the
            TokenCredential interface.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.

            - `webSocketOptions`: Options for the websocket implementation used
            for AMQP.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.getEventHubProperties'
    name: getEventHubProperties(GetEventHubPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the Event Hub runtime information.
    syntax:
      content: 'function getEventHubProperties(options?: GetEventHubPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/event-hubs.GetEventHubPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.EventHubProperties>
        description: A promise that resolves with EventHubProperties.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.getPartitionIds'
    name: getPartitionIds(GetPartitionIdsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides an array of partitionIds.
    syntax:
      content: 'function getPartitionIds(options?: GetPartitionIdsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/event-hubs.GetPartitionIdsOptions'
          description: ''
          optional: true
      return:
        type:
          - 'Promise<string[]>'
        description: A promise that resolves with an Array of strings.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.getPartitionProperties'
    name: 'getPartitionProperties(string, GetPartitionPropertiesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides information about the specified partition.
    syntax:
      content: >-
        function getPartitionProperties(partitionId: string, options?:
        GetPartitionPropertiesOptions)
      parameters:
        - id: partitionId
          type:
            - string
          description: Partition ID for which partition information is required.
        - id: options
          type:
            - '@azure/event-hubs.GetPartitionPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.PartitionProperties>
        description: A promise that resoloves with PartitionProperties.
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.subscribe_1'
    name: 'subscribe(string, SubscriptionEventHandlers, SubscribeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Subscribe to all messages from a single partition.
    syntax:
      content: >-
        function subscribe(partitionId: string, handlers:
        SubscriptionEventHandlers, options?: SubscribeOptions)
      parameters:
        - id: partitionId
          type:
            - string
          description: A partition id to subscribe to.
        - id: handlers
          type:
            - '@azure/event-hubs.SubscriptionEventHandlers'
          description: |-
            Handlers for the lifecycle of the subscription - initialization
                            per partition, receiving events, handling errors and the closing
                            of a subscription per partition.
        - id: options
          type:
            - '@azure/event-hubs.SubscribeOptions'
          description: |
            Options to handle additional events related to partitions (errors,
                           opening, closing) as well as batch sizing.
          optional: true
      return:
        type:
          - '@azure/event-hubs.Subscription'
        description: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.subscribe'
    name: 'subscribe(SubscriptionEventHandlers, SubscribeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Subscribe to all messages from all available partitions.
    syntax:
      content: >-
        function subscribe(handlers: SubscriptionEventHandlers, options?:
        SubscribeOptions)
      parameters:
        - id: handlers
          type:
            - '@azure/event-hubs.SubscriptionEventHandlers'
          description: |-
            Handlers for the lifecycle of the subscription - initialization
                            per partition, receiving events, handling errors and the closing
                            of a subscription per partition.
        - id: options
          type:
            - '@azure/event-hubs.SubscribeOptions'
          description: |
            Options to handle additional events related to partitions (errors,
                           opening, closing) as well as batch sizing.
          optional: true
      return:
        type:
          - '@azure/event-hubs.Subscription'
        description: ''
    package: '@azure/event-hubs'
references:
  - uid: '@azure/event-hubs.EventHubClientOptions'
    name: EventHubClientOptions
    spec.typeScript:
      - name: EventHubClientOptions
        fullName: EventHubClientOptions
        uid: '@azure/event-hubs.EventHubClientOptions'
  - uid: '@azure/event-hubs.CheckpointStore'
    name: CheckpointStore
    spec.typeScript:
      - name: CheckpointStore
        fullName: CheckpointStore
        uid: '@azure/event-hubs.CheckpointStore'
  - uid: '@azure/event-hubs.GetEventHubPropertiesOptions'
    name: GetEventHubPropertiesOptions
    spec.typeScript:
      - name: GetEventHubPropertiesOptions
        fullName: GetEventHubPropertiesOptions
        uid: '@azure/event-hubs.GetEventHubPropertiesOptions'
  - uid: Promise<@azure/event-hubs.EventHubProperties>
    name: EventHubProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubProperties
        fullName: EventHubProperties
        uid: '@azure/event-hubs.EventHubProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.GetPartitionIdsOptions'
    name: GetPartitionIdsOptions
    spec.typeScript:
      - name: GetPartitionIdsOptions
        fullName: GetPartitionIdsOptions
        uid: '@azure/event-hubs.GetPartitionIdsOptions'
  - uid: '@azure/event-hubs.GetPartitionPropertiesOptions'
    name: GetPartitionPropertiesOptions
    spec.typeScript:
      - name: GetPartitionPropertiesOptions
        fullName: GetPartitionPropertiesOptions
        uid: '@azure/event-hubs.GetPartitionPropertiesOptions'
  - uid: Promise<@azure/event-hubs.PartitionProperties>
    name: PartitionProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PartitionProperties
        fullName: PartitionProperties
        uid: '@azure/event-hubs.PartitionProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.SubscriptionEventHandlers'
    name: SubscriptionEventHandlers
    spec.typeScript:
      - name: SubscriptionEventHandlers
        fullName: SubscriptionEventHandlers
        uid: '@azure/event-hubs.SubscriptionEventHandlers'
  - uid: '@azure/event-hubs.SubscribeOptions'
    name: SubscribeOptions
    spec.typeScript:
      - name: SubscribeOptions
        fullName: SubscribeOptions
        uid: '@azure/event-hubs.SubscribeOptions'
  - uid: '@azure/event-hubs.Subscription'
    name: Subscription
    spec.typeScript:
      - name: Subscription
        fullName: Subscription
        uid: '@azure/event-hubs.Subscription'
