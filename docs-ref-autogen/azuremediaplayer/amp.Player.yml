### YamlMime:UniversalReference
items:
  - uid: azuremediaplayer.amp.Player
    name: Player
    langs:
      - typeScript
    fullName: Player
    children:
      - azuremediaplayer.amp.Player.addEventListener
      - azuremediaplayer.amp.Player.addMidRoll
      - azuremediaplayer.amp.Player.audioBufferData
      - azuremediaplayer.amp.Player.AudioTracksMenu
      - azuremediaplayer.amp.Player.autoplay_1
      - azuremediaplayer.amp.Player.autoplay
      - azuremediaplayer.amp.Player.buffered
      - azuremediaplayer.amp.Player.canControlPlaybackRate
      - azuremediaplayer.amp.Player.Cea708CaptionsSettings
      - azuremediaplayer.amp.Player.controls_1
      - azuremediaplayer.amp.Player.controls
      - azuremediaplayer.amp.Player.currentAbsoluteTime
      - azuremediaplayer.amp.Player.currentAbsoluteTime_1
      - azuremediaplayer.amp.Player.currentAudioStreamList
      - azuremediaplayer.amp.Player.currentClip
      - azuremediaplayer.amp.Player.currentDownloadBitrate
      - azuremediaplayer.amp.Player.currentHeuristicProfile_1
      - azuremediaplayer.amp.Player.currentHeuristicProfile
      - azuremediaplayer.amp.Player.currentMediaTime
      - azuremediaplayer.amp.Player.currentPlayableWindow
      - azuremediaplayer.amp.Player.currentPlaybackBitrate
      - azuremediaplayer.amp.Player.currentPlayerSettingValue
      - azuremediaplayer.amp.Player.currentProtectionInfo
      - azuremediaplayer.amp.Player.currentSrc
      - azuremediaplayer.amp.Player.currentTechName
      - azuremediaplayer.amp.Player.currentTime_1
      - azuremediaplayer.amp.Player.currentTime
      - azuremediaplayer.amp.Player.currentType
      - azuremediaplayer.amp.Player.currentVideoStreamList
      - azuremediaplayer.amp.Player.disableTextTracks
      - azuremediaplayer.amp.Player.dispose
      - azuremediaplayer.amp.Player.downloadableMedia
      - azuremediaplayer.amp.Player.downloadableMedia_1
      - azuremediaplayer.amp.Player.DownloadableMediaFile
      - azuremediaplayer.amp.Player.duration
      - azuremediaplayer.amp.Player.ended
      - azuremediaplayer.amp.Player.enterFullscreen
      - azuremediaplayer.amp.Player.error
      - azuremediaplayer.amp.Player.exitFullscreen
      - azuremediaplayer.amp.Player.fromPresentationTime
      - azuremediaplayer.amp.Player.getAmpVersion
      - azuremediaplayer.amp.Player.getCurrentTextTrack
      - azuremediaplayer.amp.Player.getMemoryLog
      - azuremediaplayer.amp.Player.height
      - azuremediaplayer.amp.Player.height_1
      - azuremediaplayer.amp.Player.HeuristicProfile
      - azuremediaplayer.amp.Player.HotKeys
      - azuremediaplayer.amp.Player.Imsc1CaptionsSettings
      - azuremediaplayer.amp.Player.isFullscreen
      - azuremediaplayer.amp.Player.isLive
      - azuremediaplayer.amp.Player.KeyValuePair
      - azuremediaplayer.amp.Player.LogoConfig
      - azuremediaplayer.amp.Player.manifestPlayableWindowLength
      - azuremediaplayer.amp.Player.muted_1
      - azuremediaplayer.amp.Player.muted
      - azuremediaplayer.amp.Player.Options
      - azuremediaplayer.amp.Player.options_1
      - azuremediaplayer.amp.Player.options
      - azuremediaplayer.amp.Player.pause
      - azuremediaplayer.amp.Player.paused
      - azuremediaplayer.amp.Player.play
      - azuremediaplayer.amp.Player.playbackRate
      - azuremediaplayer.amp.Player.playbackRate_1
      - azuremediaplayer.amp.Player.PlaybackSpeedOptions
      - azuremediaplayer.amp.Player.playerElement
      - azuremediaplayer.amp.Player.playlist_1
      - azuremediaplayer.amp.Player.playlist
      - azuremediaplayer.amp.Player.poster_1
      - azuremediaplayer.amp.Player.poster
      - azuremediaplayer.amp.Player.presentationLayout
      - azuremediaplayer.amp.Player.presentationLayout_1
      - azuremediaplayer.amp.Player.presentationTimeOffsetInSec
      - azuremediaplayer.amp.Player.ProtectionInfo
      - azuremediaplayer.amp.Player.ready
      - azuremediaplayer.amp.Player.removeEventListener
      - azuremediaplayer.amp.Player.SDN
      - azuremediaplayer.amp.Player.seeking
      - azuremediaplayer.amp.Player.segmentBoundaries
      - azuremediaplayer.amp.Player.setActiveTextTrack
      - azuremediaplayer.amp.Player.setXmlHttpRequestFactory
      - azuremediaplayer.amp.Player.SkinConfig
      - azuremediaplayer.amp.Player.Source
      - azuremediaplayer.amp.Player.spliceWaiting
      - azuremediaplayer.amp.Player.src
      - azuremediaplayer.amp.Player.src_1
      - azuremediaplayer.amp.Player.textTracks
      - azuremediaplayer.amp.Player.toPresentationTime
      - azuremediaplayer.amp.Player.TraceConfig
      - azuremediaplayer.amp.Player.TraceTarget
      - azuremediaplayer.amp.Player.Track
      - azuremediaplayer.amp.Player.videoBufferData
      - azuremediaplayer.amp.Player.videoHeight
      - azuremediaplayer.amp.Player.videoWidth
      - azuremediaplayer.amp.Player.volume_1
      - azuremediaplayer.amp.Player.volume
      - azuremediaplayer.amp.Player.WallClockTimeDisplaySettings
      - azuremediaplayer.amp.Player.width
      - azuremediaplayer.amp.Player.width_1
    type: module
    summary: >-
      The Player instance for <xref:azuremediaplayer.amp>, for the caller to
      interact with.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.addEventListener
    name: 'addEventListener(string, Function)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Add an event listener to this Player's element.\n##### Example:\n\t    myPlayer.addEventListener('eventType', myFunc);\n"
    syntax:
      content: 'function addEventListener(eventName: string, handler: Function)'
      parameters:
        - id: eventName
          type:
            - string
          description: >
            The event type string. Use <xref:azuremediaplayer.amp.eventName> for
            the list of event types.

            ex: `amp.eventName.playing`
        - id: handler
          type:
            - Function
          description: Event handler.
      return:
        type:
          - azuremediaplayer.amp.Player
        description: 'The <xref:azuremediaplayer.amp.Player> calling this function.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.addMidRoll
    name: addMidRoll(MidRoll)
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds a mid-roll clip schedule to the currently playing clip.
    syntax:
      content: 'function addMidRoll(newMidRoll: MidRoll)'
      parameters:
        - id: newMidRoll
          type:
            - azuremediaplayer.amp.MidRoll
          description: Mid-roll to insert or cancel
      return:
        type:
          - 'azuremediaplayer.amp.MidRoll[]'
        description: The array of scheduled mid-rolls on the currently playing clip.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.audioBufferData
    name: audioBufferData()
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the audio buffer information
    syntax:
      content: function audioBufferData()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.BufferData
        description: '<xref:azuremediaplayer.amp.BufferData>, undefined if not available'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.autoplay_1
    name: autoplay()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function autoplay()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.autoplay
    name: autoplay(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set/Get whether or not to autoplay on
      <xref:azuremediaplayer.amp.Player.src>.
    syntax:
      content: 'function autoplay(value: boolean)'
      parameters:
        - id: value
          type:
            - boolean
          description: Whether to autoplay or not.
      return:
        type:
          - azuremediaplayer.amp.Player
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, true/false when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.buffered
    name: buffered()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Get a TimeRanges object with the times of the source that have been
      downloaded.

      ##### Examples:
           var bufferedTimeRange = myPlayer.buffered();

      Number of different ranges of time have been buffered. Usually 1.

           var numberOfRanges = bufferedTimeRange.length;

      Time in seconds when the first range starts. Usually 0.

           var firstRangeStart = bufferedTimeRange.start(0);

      Time in seconds when the first range ends

           var firstRangeEnd = bufferedTimeRange.end(0);

      Length in seconds of the first time range
          var firstRangeLength = firstRangeEnd - firstRangeStart;
    syntax:
      content: function buffered()
      parameters: []
      return:
        type:
          - TimeRanges
        description: >-
          TimeRanges object [following JS
          spec](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges).
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.canControlPlaybackRate
    name: canControlPlaybackRate()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Checks if the player is able to control playback rate.

      The ability to control playback rate depends on current tech, browser and
      OS.

      ##### Example:
          var isPlaybackRateControlAvailable = myPlayer.canControlPlaybackRate();
    syntax:
      content: function canControlPlaybackRate()
      parameters: []
      return:
        type:
          - boolean
        description: 'True if playback rate can be changed, False otherwise.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.controls_1
    name: controls()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function controls()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.controls
    name: controls(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Set/Get whether or not the controls are showing.
    syntax:
      content: 'function controls(value: boolean)'
      parameters:
        - id: value
          type:
            - boolean
          description: Set controls to showing or not.
      return:
        type:
          - azuremediaplayer.amp.Player
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, true/false when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentAbsoluteTime
    name: currentAbsoluteTime()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Gets the current absolute time, in seconds.'
    syntax:
      content: function currentAbsoluteTime()
      parameters: []
      return:
        type:
          - number
        description: 'absolute time in seconds, undefined if not available'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentAbsoluteTime_1
    name: currentAbsoluteTime(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function currentAbsoluteTime(seconds: number)'
      parameters:
        - id: seconds
          type:
            - number
          description: ''
      return:
        type:
          - azuremediaplayer.amp.Player
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentAudioStreamList
    name: currentAudioStreamList()
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the current audio streams list.
    syntax:
      content: function currentAudioStreamList()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.AudioStreamList
        description: >-
          <xref:azuremediaplayer.amp.AudioStreamList>, undefined if not
          available
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentClip
    name: currentClip()
    children: []
    type: method
    langs:
      - typeScript
    summary: Return current clip that is being played.
    syntax:
      content: function currentClip()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.Clip
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentDownloadBitrate
    name: currentDownloadBitrate()
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the download bitrate.
    syntax:
      content: function currentDownloadBitrate()
      parameters: []
      return:
        type:
          - number
        description: 'bitrate in bps, undefined if not available'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentHeuristicProfile_1
    name: currentHeuristicProfile()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function currentHeuristicProfile()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentHeuristicProfile
    name: currentHeuristicProfile(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Set/Get the current HeuristicProfile
    syntax:
      content: 'function currentHeuristicProfile(value: string)'
      parameters:
        - id: value
          type:
            - string
          description: ''
      return:
        type:
          - azuremediaplayer.amp.Player
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentMediaTime
    name: currentMediaTime()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Gets the current media time, in seconds.'
    syntax:
      content: function currentMediaTime()
      parameters: []
      return:
        type:
          - number
        description: 'media time in seconds, undefined if not available'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentPlayableWindow
    name: currentPlayableWindow()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      For live presentations, get the playable window start time (current
      absolute time - dvr window length) and end time in seconds.

      For VOD, returns undefined.

      Example: If the playable window is 2 hours and the stream has been going
      for 3 hours,

      the returned time range would be 01:00:00 - 03:00:00
    syntax:
      content: function currentPlayableWindow()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.TimeRange
        description: Playable window start and end in seconds
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentPlaybackBitrate
    name: currentPlaybackBitrate()
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the playback bitrate.
    syntax:
      content: function currentPlaybackBitrate()
      parameters: []
      return:
        type:
          - number
        description: 'bitrate in bps, undefined if not available'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentPlayerSettingValue
    name: currentPlayerSettingValue(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the current Player settings for the given key
    syntax:
      content: 'function currentPlayerSettingValue(key: string)'
      parameters:
        - id: key
          type:
            - string
          description: ''
      return:
        type:
          - any
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentProtectionInfo
    name: currentProtectionInfo()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the protectionInfo for the current source.
    syntax:
      content: function currentProtectionInfo()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.Player.ProtectionInfo
        description: Protection information of the current source.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentSrc
    name: currentSrc()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the fully qualified URL of the current source value e.g.
      http://mysite.com/video.mp4.

      Can be used in conjuction with
      <xref:azuremediaplayer.amp.Player.currentType> to assist in rebuilding the
      current source object.
    syntax:
      content: function currentSrc()
      parameters: []
      return:
        type:
          - string
        description: Current source.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentTechName
    name: currentTechName()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the current name of the chosen tech.
    syntax:
      content: function currentTechName()
      parameters: []
      return:
        type:
          - string
        description: Name of tech(in Pascal case).
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentTime_1
    name: currentTime()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function currentTime()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentTime
    name: currentTime(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Set the current time.
      ##### Example of setting:
          myPlayer.currentTime(120); // 2 minutes into the video

      ##### Example of getting:
          var whereYouAt = myPlayer.currentTime();
    syntax:
      content: 'function currentTime(seconds: number)'
      parameters:
        - id: seconds
          type:
            - number
          description: 'Time to seek to, in seconds.'
      return:
        type:
          - azuremediaplayer.amp.Player
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, time in seconds when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentType
    name: currentType()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the current source type e.g. video/mp4.

      This can allow you rebuild the current source object so that you could
      load the same

      source and tech later.
    syntax:
      content: function currentType()
      parameters: []
      return:
        type:
          - string
        description: MIME type of the current source.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.currentVideoStreamList
    name: currentVideoStreamList()
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the current video streams list.
    syntax:
      content: function currentVideoStreamList()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.VideoStreamList
        description: >-
          <xref:azuremediaplayer.amp.VideoStreamList>, undefined if not
          available
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.disableTextTracks
    name: disableTextTracks()
    children: []
    type: method
    langs:
      - typeScript
    summary: Disables text Tracks that are currently being shown.
    syntax:
      content: function disableTextTracks()
      parameters: []
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.dispose
    name: dispose()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Destroys the <xref:azuremediaplayer.amp.Player> and does any necessary
      cleanup.

      ##### Example:
          myPlayer.dispose();

      This is especially helpful if you are dynamically adding and removing
      videos

      to/from the DOM.

      The orignial videoTag  created by the app is also deleted as part of this
      dispose.
    syntax:
      content: function dispose()
      parameters: []
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.downloadableMedia
    name: downloadableMedia()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets or sets downloadable media options. Setting new value completely
      overwrites existing downloadable media.
    syntax:
      content: function downloadableMedia()
      parameters: []
      return:
        type:
          - 'azuremediaplayer.amp.Player.DownloadableMediaFile[]'
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, current downlodable media value when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.downloadableMedia_1
    name: 'downloadableMedia(DownloadableMediaFile[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function downloadableMedia(value: DownloadableMediaFile[])'
      parameters:
        - id: value
          type:
            - 'azuremediaplayer.amp.Player.DownloadableMediaFile[]'
          description: ''
      return:
        type:
          - azuremediaplayer.amp.Player
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.duration
    name: duration()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get the length in time of the source. For live, it is the playable window.
      ##### Example:
          var lengthOfSource = myPlayer.duration();

      **NOTE**: The source must have started loading before the duration can be
      known, and in the case of Flash, may not be known until the video starts
      playing.
    syntax:
      content: function duration()
      parameters: []
      return:
        type:
          - number
        description: 'Duration of the source, in seconds.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.ended
    name: ended()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get whether or not the player is in the "ended" state.
    syntax:
      content: function ended()
      parameters: []
      return:
        type:
          - boolean
        description: 'True if the player is in the ended state, false if not.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.enterFullscreen
    name: enterFullscreen()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Increase the size of the video to full screen.

      ##### Example:
          myPlayer.enterFullscreen();

      In some browsers, full screen is not supported natively, so it enters

      "full window mode", where the video fills the browser window.

      In browsers and devices that support native full screen, sometimes the

      browser's default controls will be shown, and not the
      <xref:azuremediaplayer.amp> custom skin.

      This includes most mobile devices (iOS, Android) and older versions of

      Safari.
    syntax:
      content: function enterFullscreen()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.Player
        description: 'The <xref:azuremediaplayer.amp.Player> calling this function.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.error
    name: error()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the current error.
    syntax:
      content: function error()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.MediaError
        description: Media error
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.exitFullscreen
    name: exitFullscreen()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get the video to its normal size after having been in full screen mode.
      ##### Example:
          myPlayer.exitFullscreen();
    syntax:
      content: function exitFullscreen()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.Player
        description: 'The <xref:azuremediaplayer.amp.Player> calling this function.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.fromPresentationTime
    name: fromPresentationTime(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Used in live playback calculations.

      Given an absolute time, returns the associated time from the current
      playable window.

      If the given absolute time falls outside of the current playable window,

      returns the difference between the playable window edge and the given
      absolute time.

      Example: If the playable window is 2 hours and the stream has been going
      for 3 hours,

      if you pass the absolute time of 01:00:00 (1 hour), the returned playable
      window time would be 00:00:00.
    syntax:
      content: 'function fromPresentationTime(time: number)'
      parameters:
        - id: time
          type:
            - number
          description: ''
      return:
        type:
          - number
        description: the player time in seconds
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.getAmpVersion
    name: getAmpVersion()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Get the version of AMP player in the format
      <MajorVersion>.<MinorVersion>.<HotfixVersion>.
    syntax:
      content: function getAmpVersion()
      parameters: []
      return:
        type:
          - string
        description: Released AMP player version string.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.getCurrentTextTrack
    name: getCurrentTextTrack()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the textTrack that is currently being shown.
    syntax:
      content: function getCurrentTextTrack()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.Player.Track
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.getMemoryLog
    name: getMemoryLog(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get the Log traces from the player, if memoryLog is enabled.'
    syntax:
      content: 'function getMemoryLog(flush: boolean)'
      parameters:
        - id: flush
          type:
            - boolean
          description: flush memoryLog after returning the log.
      return:
        type:
          - string
        description: Log trace string from the player.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.height
    name: height()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Set/Get height of the component (CSS values).

      Setting the video tag dimension values works with values in pixels, % or
      'auto'.
    syntax:
      content: function height()
      parameters: []
      return:
        type:
          - Object
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, pixels when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.height_1
    name: height(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function height(value: Object)'
      parameters:
        - id: value
          type:
            - Object
          description: ''
      return:
        type:
          - azuremediaplayer.amp.Player
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.isFullscreen
    name: isFullscreen()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Check if the player is in fullscreen mode.
      ##### Example:
          var isFullscreen = myPlayer.isFullscreen();
    syntax:
      content: function isFullscreen()
      parameters: []
      return:
        type:
          - boolean
        description: 'True if fullscreen, false if not.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.isLive
    name: isLive()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get whether or not the presentation is live.
    syntax:
      content: function isLive()
      parameters: []
      return:
        type:
          - boolean
        description: 'true if the presentation is live, false if not.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.manifestPlayableWindowLength
    name: manifestPlayableWindowLength()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the playable window length in seconds from the manifest
    syntax:
      content: function manifestPlayableWindowLength()
      parameters: []
      return:
        type:
          - number
        description: |-
          Playable window length in seconds from the manifest
          or undefined if not present in the tech
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.muted_1
    name: muted()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function muted()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.muted
    name: muted(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Set/Get muted state.
      ##### Example of setting:
          myPlayer.muted(true); // mute the volume
    syntax:
      content: 'function muted(value: boolean)'
      parameters:
        - id: value
          type:
            - boolean
          description: 'True to mute, false to unmute.'
      return:
        type:
          - azuremediaplayer.amp.Player
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, current mute state when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.options_1
    name: options()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function options()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.Player.Options
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.options
    name: options(Options)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets/Sets the player level options to add new options or override the
      given options if

      has already been set.
    syntax:
      content: 'function options(options: Options)'
      parameters:
        - id: options
          type:
            - azuremediaplayer.amp.Player.Options
          description: Object of new option values
      return:
        type:
          - azuremediaplayer.amp.Player.Options
        description: '**New** object of this.options_ and options merged'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.pause
    name: pause()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Pauses the video playback.
          myPlayer.pause();
    syntax:
      content: function pause()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.Player
        description: 'The <xref:azuremediaplayer.amp.Player> calling this function.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.paused
    name: paused()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Get whether or not the player is in the "paused" state.
          var isPaused = myPlayer.paused();
    syntax:
      content: function paused()
      parameters: []
      return:
        type:
          - boolean
        description: 'True if the player is in the paused state, false if not.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.play
    name: play()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Starts media playback.
          myPlayer.play();
    syntax:
      content: function play()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.Player
        description: 'The <xref:azuremediaplayer.amp.Player> calling this function.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.playbackRate
    name: playbackRate()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gets or sets the current playback rate.  A playback rate of
      1.0 represents normal speed and 0.5 would indicate half-speed
      playback, for instance.
    syntax:
      content: function playbackRate()
      parameters: []
      return:
        type:
          - number
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, current playback rate when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.playbackRate_1
    name: playbackRate(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function playbackRate(value: number)'
      parameters:
        - id: value
          type:
            - number
          description: ''
      return:
        type:
          - azuremediaplayer.amp.Player
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.playerElement
    name: playerElement()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the el_ of AMP player
    syntax:
      content: function playerElement()
      parameters: []
      return:
        type:
          - HTMLVideoElement
        description: the el_ from the underlying player.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.playlist_1
    name: playlist()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function playlist()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.PlayList
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.playlist
    name: playlist(PlayList)
    children: []
    type: method
    langs:
      - typeScript
    summary: Set/Get playlist to play.
    syntax:
      content: 'function playlist(newPlaylist: PlayList)'
      parameters:
        - id: newPlaylist
          type:
            - azuremediaplayer.amp.PlayList
          description: |
            Playlist object
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.poster_1
    name: poster()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function poster()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.poster
    name: poster(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Set/Get the poster image source url.
      ##### Example of setting:
          myPlayer.poster('http://example.com/myImage.jpg');

      ##### Example of getting:
          var currentPoster = myPlayer.poster();
    syntax:
      content: 'function poster(src: string)'
      parameters:
        - id: src
          type:
            - string
          description: Poster image source URL when setting.
      return:
        type:
          - azuremediaplayer.amp.Player
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, posterURL when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.presentationLayout
    name: presentationLayout()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get and Set presentationLayout.
    syntax:
      content: function presentationLayout()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.PresentationLayout
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.presentationLayout_1
    name: presentationLayout(PresentationLayout)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function presentationLayout(value: PresentationLayout)'
      parameters:
        - id: value
          type:
            - azuremediaplayer.amp.PresentationLayout
          description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.presentationTimeOffsetInSec
    name: presentationTimeOffsetInSec()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the presentation time offset specified in the manifest ( In seconds
      ).

      Available only in DASH.
    syntax:
      content: function presentationTimeOffsetInSec()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.ready
    name: ready(Function)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Bind a listener to the Player's ready state.

      Different from event listeners in that if the ready event has already
      happened

      it will trigger the function immediately.
    syntax:
      content: 'function ready(handler: Function)'
      parameters:
        - id: handler
          type:
            - Function
          description: Ready handler
      return:
        type:
          - azuremediaplayer.amp.Player
        description: 'The <xref:azuremediaplayer.amp.Player> calling this function.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.removeEventListener
    name: 'removeEventListener(string, Function)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Remove an event listener from this Player's element.

      ##### Example:
          myPlayer.removeEventListener('eventType', myFunc);

      If myFunc is excluded, *all* listeners for the event type will be removed.

      If eventType is excluded, *all* listeners will be removed from the
      component.
    syntax:
      content: 'function removeEventListener(eventName: string, handler?: Function)'
      parameters:
        - id: eventName
          type:
            - string
          description: >
            The event type string. Use <xref:azuremediaplayer.amp.eventName> for
            the list of event types.

            ex: `amp.eventName.playing`
        - id: handler
          type:
            - Function
          description: Event handler.
          optional: true
      return:
        type:
          - azuremediaplayer.amp.Player
        description: 'The <xref:azuremediaplayer.amp.Player> calling this function.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.seeking
    name: seeking()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get whether or not the player is in the "seeking" state.
    syntax:
      content: function seeking()
      parameters: []
      return:
        type:
          - boolean
        description: 'True if the player is in the seeking state, false if not.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.segmentBoundaries
    name: segmentBoundaries()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get an array of the calculated segment boundary start times in seconds.
    syntax:
      content: function segmentBoundaries()
      parameters: []
      return:
        type:
          - Array<number>
        description: Calculated segment boundaries
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.setActiveTextTrack
    name: setActiveTextTrack(Track)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets active text Track.
    syntax:
      content: 'function setActiveTextTrack(textTrack: Track)'
      parameters:
        - id: textTrack
          type:
            - azuremediaplayer.amp.Player.Track
          description: |
            The text track.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.setXmlHttpRequestFactory
    name: setXmlHttpRequestFactory(XMLHttpRequestFactory)
    children: []
    type: method
    langs:
      - typeScript
    summary: Set a factory to allow custom XMLHttpRequest creation logic.
    syntax:
      content: 'function setXmlHttpRequestFactory(factory: XMLHttpRequestFactory)'
      parameters:
        - id: factory
          type:
            - azuremediaplayer.amp.XMLHttpRequestFactory
          description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.spliceWaiting
    name: spliceWaiting()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Returns newly seen splices, evt: "splicewaiting"'
    syntax:
      content: function spliceWaiting()
      parameters: []
      return:
        type:
          - 'azuremediaplayer.amp.Splice[]'
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.src
    name: 'src(Source, Track[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Sets a single source to play.

      Use this method if you know the type of the source and only have one
      source.

      myPlayer.src({ type: "video/mp4", src:
      "http://www.example.com/path/to/video.mp4" },

      ~~~

      ~~~

      [{ kind: "captions" src: "http://example.com/path/to/track.vtt" srclang:
      "fr" label: "French"}]);

      ~~~

      ~~~
    syntax:
      content: 'function src(newSource: Source, tracks?: Track[])'
      parameters:
        - id: newSource
          type:
            - azuremediaplayer.amp.Player.Source
          description: Source object
        - id: tracks
          type:
            - 'azuremediaplayer.amp.Player.Track[]'
          description: ''
          optional: true
      return:
        type:
          - azuremediaplayer.amp.Player
        description: 'The <xref:azuremediaplayer.amp.Player> calling this function.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.src_1
    name: 'src(Source[], Track[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets multiple versions of the source to play so

      that it can be played using techs across browsers.

      ~~~

      myPlayer.src([

      ~~~

      ~~~

      { type: "application/dash+xml", src:
      "http://www.example.com/path/to/video.ism(format=mpd-csf-time)" },

      ~~~

      ~~~

      { type: "application/dash+xml", src:
      "http://www.example.com/path/to/video.ism(format=mpd-time-csf)",
      protectionInfo: [{type: "AES", authenticationToken:"token"}] },

      ~~~

      ~~~

      { type: "application/dash+xml", src:
      "http://www.example.com/path/to/video.ism(format=mpd-time-csf)",
      disableUrlRewriter: true },

      ~~~

      ~~~

      { type: "application/dash+xml", src:
      "http://www.example.com/path/to/video.ism(format=mpd-time-csf)",
      streamingFormats: ["SMOOTH", "DASH"] },

      ~~~

      ~~~

      { type: "video/ogg", src: "http://www.example.com/path/to/video.ogv" }],

      ~~~

      ~~~

      [{ kind: "captions" src: "http://example.com/path/to/track.vtt" srclang:
      "fr" label: "French"}]

      ~~~

      ~~

      );

      ~~~
    syntax:
      content: 'function src(newSources: Source[], textTracks?: Track[])'
      parameters:
        - id: newSources
          type:
            - 'azuremediaplayer.amp.Player.Source[]'
          description: Array of sources
        - id: textTracks
          type:
            - 'azuremediaplayer.amp.Player.Track[]'
          description: ''
          optional: true
      return:
        type:
          - azuremediaplayer.amp.Player
        description: 'The <xref:azuremediaplayer.amp.Player> calling this function.'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.textTracks
    name: textTracks()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get an array of associated text tracks. captions, subtitles, chapters,
      descriptions

      http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
    syntax:
      content: function textTracks()
      parameters: []
      return:
        type:
          - 'azuremediaplayer.amp.Player.Track[]'
        description: Array of track objects
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.toPresentationTime
    name: toPresentationTime(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Used in live playback calculations.

      Given a time from the current playable window, returns the associated
      absolute time.

      Example: If the playable window is 2 hours and the stream has been going
      for 3 hours,

      if you pass the playable window time of 00:00:00, the returned absolute
      time would be 01:00:00 (1 hour).
    syntax:
      content: 'function toPresentationTime(time: number)'
      parameters:
        - id: time
          type:
            - number
          description: ''
      return:
        type:
          - number
        description: the presentation time in seconds
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.videoBufferData
    name: videoBufferData()
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the video buffer information
    syntax:
      content: function videoBufferData()
      parameters: []
      return:
        type:
          - azuremediaplayer.amp.BufferData
        description: '<xref:azuremediaplayer.amp.BufferData>, undefined if not available'
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.videoHeight
    name: videoHeight()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the videoHeight of the player.
    syntax:
      content: function videoHeight()
      parameters: []
      return:
        type:
          - number
        description: Video height of the player.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.videoWidth
    name: videoWidth()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the videoWidth of the player.
    syntax:
      content: function videoWidth()
      parameters: []
      return:
        type:
          - number
        description: Video width of the player.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.volume_1
    name: volume()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function volume()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.volume
    name: volume(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Set/Get volume of the source.
      ##### Example:
          myPlayer.volume(0.5); // Set volume to half

      0 is off (muted), 1.0 is all the way up, 0.5 is half way.
    syntax:
      content: 'function volume(percentAsDecimal: number)'
      parameters:
        - id: percentAsDecimal
          type:
            - number
          description: New volume as a decimal (0 to 1.0).
      return:
        type:
          - azuremediaplayer.amp.Player
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, current volume when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.width
    name: width()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Set/Get width of the component (CSS values).

      Setting the video tag dimension values works with values in pixels, % or
      'auto'.
    syntax:
      content: function width()
      parameters: []
      return:
        type:
          - Object
        description: >-
          The <xref:azuremediaplayer.amp.Player> calling this function when
          setting, pixels when getting.
    package: azuremediaplayer
  - uid: azuremediaplayer.amp.Player.width_1
    name: width(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function width(value: Object)'
      parameters:
        - id: value
          type:
            - Object
          description: ''
      return:
        type:
          - azuremediaplayer.amp.Player
        description: ''
    package: azuremediaplayer
references:
  - uid: azuremediaplayer.amp.Player.HeuristicProfile
    name: HeuristicProfile
    spec.typeScript:
      - name: HeuristicProfile
        fullName: HeuristicProfile
        uid: azuremediaplayer.amp.Player.HeuristicProfile
  - uid: azuremediaplayer.amp.Player.AudioTracksMenu
    name: AudioTracksMenu
    spec.typeScript:
      - name: AudioTracksMenu
        fullName: AudioTracksMenu
        uid: azuremediaplayer.amp.Player.AudioTracksMenu
  - uid: azuremediaplayer.amp.Player.Cea708CaptionsSettings
    name: Cea708CaptionsSettings
    spec.typeScript:
      - name: Cea708CaptionsSettings
        fullName: Cea708CaptionsSettings
        uid: azuremediaplayer.amp.Player.Cea708CaptionsSettings
  - uid: azuremediaplayer.amp.Player.DownloadableMediaFile
    name: DownloadableMediaFile
    spec.typeScript:
      - name: DownloadableMediaFile
        fullName: DownloadableMediaFile
        uid: azuremediaplayer.amp.Player.DownloadableMediaFile
  - uid: azuremediaplayer.amp.Player.HotKeys
    name: HotKeys
    spec.typeScript:
      - name: HotKeys
        fullName: HotKeys
        uid: azuremediaplayer.amp.Player.HotKeys
  - uid: azuremediaplayer.amp.Player.Imsc1CaptionsSettings
    name: Imsc1CaptionsSettings
    spec.typeScript:
      - name: Imsc1CaptionsSettings
        fullName: Imsc1CaptionsSettings
        uid: azuremediaplayer.amp.Player.Imsc1CaptionsSettings
  - uid: azuremediaplayer.amp.Player.KeyValuePair
    name: KeyValuePair
    spec.typeScript:
      - name: KeyValuePair
        fullName: KeyValuePair
        uid: azuremediaplayer.amp.Player.KeyValuePair
  - uid: azuremediaplayer.amp.Player.LogoConfig
    name: LogoConfig
    spec.typeScript:
      - name: LogoConfig
        fullName: LogoConfig
        uid: azuremediaplayer.amp.Player.LogoConfig
  - uid: azuremediaplayer.amp.CorsConfig
    name: CorsConfig
    spec.typeScript:
      - name: CorsConfig
        fullName: CorsConfig
        uid: azuremediaplayer.amp.CorsConfig
  - uid: 'azuremediaplayer.amp.Player.Imsc1CaptionsSettings[]'
    name: 'Imsc1CaptionsSettings[]'
    spec.typeScript:
      - name: Imsc1CaptionsSettings
        fullName: Imsc1CaptionsSettings
        uid: azuremediaplayer.amp.Player.Imsc1CaptionsSettings
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.Player.PlaybackSpeedOptions
    name: PlaybackSpeedOptions
    spec.typeScript:
      - name: PlaybackSpeedOptions
        fullName: PlaybackSpeedOptions
        uid: azuremediaplayer.amp.Player.PlaybackSpeedOptions
  - uid: azuremediaplayer.amp.Player.SDN
    name: SDN
    spec.typeScript:
      - name: SDN
        fullName: SDN
        uid: azuremediaplayer.amp.Player.SDN
  - uid: azuremediaplayer.amp.Player.SkinConfig
    name: SkinConfig
    spec.typeScript:
      - name: SkinConfig
        fullName: SkinConfig
        uid: azuremediaplayer.amp.Player.SkinConfig
  - uid: 'azuremediaplayer.amp.Player.Source[]'
    name: 'Source[]'
    spec.typeScript:
      - name: Source
        fullName: Source
        uid: azuremediaplayer.amp.Player.Source
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.Player.TraceConfig
    name: TraceConfig
    spec.typeScript:
      - name: TraceConfig
        fullName: TraceConfig
        uid: azuremediaplayer.amp.Player.TraceConfig
  - uid: azuremediaplayer.amp.Player.WallClockTimeDisplaySettings
    name: WallClockTimeDisplaySettings
    spec.typeScript:
      - name: WallClockTimeDisplaySettings
        fullName: WallClockTimeDisplaySettings
        uid: azuremediaplayer.amp.Player.WallClockTimeDisplaySettings
  - uid: azuremediaplayer.amp.Player.Options
    name: Options
    spec.typeScript:
      - name: Options
        fullName: Options
        uid: azuremediaplayer.amp.Player.Options
  - uid: 'azuremediaplayer.amp.Player.KeyValuePair<number>[]'
    name: 'KeyValuePair<number>[]'
    spec.typeScript:
      - name: KeyValuePair
        fullName: KeyValuePair
        uid: azuremediaplayer.amp.Player.KeyValuePair
      - name: '<number>[]'
        fullName: '<number>[]'
  - uid: azuremediaplayer.amp.Player.ProtectionInfo
    name: ProtectionInfo
    spec.typeScript:
      - name: ProtectionInfo
        fullName: ProtectionInfo
        uid: azuremediaplayer.amp.Player.ProtectionInfo
  - uid: 'azuremediaplayer.amp.Player.ProtectionInfo[]'
    name: 'ProtectionInfo[]'
    spec.typeScript:
      - name: ProtectionInfo
        fullName: ProtectionInfo
        uid: azuremediaplayer.amp.Player.ProtectionInfo
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.Player.Source
    name: Source
    spec.typeScript:
      - name: Source
        fullName: Source
        uid: azuremediaplayer.amp.Player.Source
  - uid: 'azuremediaplayer.amp.Player.TraceTarget[]'
    name: 'TraceTarget[]'
    spec.typeScript:
      - name: TraceTarget
        fullName: TraceTarget
        uid: azuremediaplayer.amp.Player.TraceTarget
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.Player.TraceTarget
    name: TraceTarget
    spec.typeScript:
      - name: TraceTarget
        fullName: TraceTarget
        uid: azuremediaplayer.amp.Player.TraceTarget
  - uid: azuremediaplayer.amp.Player.Track
    name: Track
    spec.typeScript:
      - name: Track
        fullName: Track
        uid: azuremediaplayer.amp.Player.Track
  - uid: azuremediaplayer.amp.Player
    name: Player
    spec.typeScript:
      - name: Player
        fullName: Player
        uid: azuremediaplayer.amp.Player
  - uid: azuremediaplayer.amp.MidRoll
    name: MidRoll
    spec.typeScript:
      - name: MidRoll
        fullName: MidRoll
        uid: azuremediaplayer.amp.MidRoll
  - uid: 'azuremediaplayer.amp.MidRoll[]'
    name: 'MidRoll[]'
    spec.typeScript:
      - name: MidRoll
        fullName: MidRoll
        uid: azuremediaplayer.amp.MidRoll
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.BufferData
    name: BufferData
    spec.typeScript:
      - name: BufferData
        fullName: BufferData
        uid: azuremediaplayer.amp.BufferData
  - uid: azuremediaplayer.amp.AudioStreamList
    name: AudioStreamList
    spec.typeScript:
      - name: AudioStreamList
        fullName: AudioStreamList
        uid: azuremediaplayer.amp.AudioStreamList
  - uid: azuremediaplayer.amp.Clip
    name: Clip
    spec.typeScript:
      - name: Clip
        fullName: Clip
        uid: azuremediaplayer.amp.Clip
  - uid: azuremediaplayer.amp.TimeRange
    name: TimeRange
    spec.typeScript:
      - name: TimeRange
        fullName: TimeRange
        uid: azuremediaplayer.amp.TimeRange
  - uid: azuremediaplayer.amp.VideoStreamList
    name: VideoStreamList
    spec.typeScript:
      - name: VideoStreamList
        fullName: VideoStreamList
        uid: azuremediaplayer.amp.VideoStreamList
  - uid: 'azuremediaplayer.amp.Player.DownloadableMediaFile[]'
    name: 'DownloadableMediaFile[]'
    spec.typeScript:
      - name: DownloadableMediaFile
        fullName: DownloadableMediaFile
        uid: azuremediaplayer.amp.Player.DownloadableMediaFile
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.MediaError
    name: MediaError
    spec.typeScript:
      - name: MediaError
        fullName: MediaError
        uid: azuremediaplayer.amp.MediaError
  - uid: azuremediaplayer.amp.PlayList
    name: PlayList
    spec.typeScript:
      - name: PlayList
        fullName: PlayList
        uid: azuremediaplayer.amp.PlayList
  - uid: azuremediaplayer.amp.PresentationLayout
    name: PresentationLayout
    spec.typeScript:
      - name: PresentationLayout
        fullName: PresentationLayout
        uid: azuremediaplayer.amp.PresentationLayout
  - uid: azuremediaplayer.amp.XMLHttpRequestFactory
    name: XMLHttpRequestFactory
    spec.typeScript:
      - name: XMLHttpRequestFactory
        fullName: XMLHttpRequestFactory
        uid: azuremediaplayer.amp.XMLHttpRequestFactory
  - uid: 'azuremediaplayer.amp.Splice[]'
    name: 'Splice[]'
    spec.typeScript:
      - name: Splice
        fullName: Splice
        uid: azuremediaplayer.amp.Splice
      - name: '[]'
        fullName: '[]'
  - uid: 'azuremediaplayer.amp.Player.Track[]'
    name: 'Track[]'
    spec.typeScript:
      - name: Track
        fullName: Track
        uid: azuremediaplayer.amp.Player.Track
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.options.azureHtml5JS
    name: azureHtml5JS
    spec.typeScript:
      - name: azureHtml5JS
        fullName: azureHtml5JS
        uid: azuremediaplayer.amp.options.azureHtml5JS
  - uid: azuremediaplayer.amp.options.flashSS
    name: flashSS
    spec.typeScript:
      - name: flashSS
        fullName: flashSS
        uid: azuremediaplayer.amp.options.flashSS
  - uid: azuremediaplayer.amp.options.silverlightSS
    name: silverlightSS
    spec.typeScript:
      - name: silverlightSS
        fullName: silverlightSS
        uid: azuremediaplayer.amp.options.silverlightSS
  - uid: azuremediaplayer.amp.options
    name: options
    spec.typeScript:
      - name: options
        fullName: options
        uid: azuremediaplayer.amp.options
  - uid: azuremediaplayer.amp.bufferDataEventName
    name: bufferDataEventName
    spec.typeScript:
      - name: bufferDataEventName
        fullName: bufferDataEventName
        uid: azuremediaplayer.amp.bufferDataEventName
  - uid: azuremediaplayer.amp.downloadableMediaType
    name: downloadableMediaType
    spec.typeScript:
      - name: downloadableMediaType
        fullName: downloadableMediaType
        uid: azuremediaplayer.amp.downloadableMediaType
  - uid: azuremediaplayer.amp.errorCode
    name: errorCode
    spec.typeScript:
      - name: errorCode
        fullName: errorCode
        uid: azuremediaplayer.amp.errorCode
  - uid: azuremediaplayer.amp.eventName
    name: eventName
    spec.typeScript:
      - name: eventName
        fullName: eventName
        uid: azuremediaplayer.amp.eventName
  - uid: azuremediaplayer.amp.protectionType
    name: protectionType
    spec.typeScript:
      - name: protectionType
        fullName: protectionType
        uid: azuremediaplayer.amp.protectionType
  - uid: azuremediaplayer.amp.streamEventName
    name: streamEventName
    spec.typeScript:
      - name: streamEventName
        fullName: streamEventName
        uid: azuremediaplayer.amp.streamEventName
  - uid: azuremediaplayer.amp.streamListEventName
    name: streamListEventName
    spec.typeScript:
      - name: streamListEventName
        fullName: streamListEventName
        uid: azuremediaplayer.amp.streamListEventName
  - uid: azuremediaplayer.amp.AdOptions
    name: AdOptions
    spec.typeScript:
      - name: AdOptions
        fullName: AdOptions
        uid: azuremediaplayer.amp.AdOptions
  - uid: azuremediaplayer.amp.AdElement
    name: AdElement
    spec.typeScript:
      - name: AdElement
        fullName: AdElement
        uid: azuremediaplayer.amp.AdElement
  - uid: azuremediaplayer.amp.Asset
    name: Asset
    spec.typeScript:
      - name: Asset
        fullName: Asset
        uid: azuremediaplayer.amp.Asset
  - uid: azuremediaplayer.amp.AudioStream
    name: AudioStream
    spec.typeScript:
      - name: AudioStream
        fullName: AudioStream
        uid: azuremediaplayer.amp.AudioStream
  - uid: 'azuremediaplayer.amp.AudioStream[]'
    name: 'AudioStream[]'
    spec.typeScript:
      - name: AudioStream
        fullName: AudioStream
        uid: azuremediaplayer.amp.AudioStream
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.MediaDownloadCompleted
    name: MediaDownloadCompleted
    spec.typeScript:
      - name: MediaDownloadCompleted
        fullName: MediaDownloadCompleted
        uid: azuremediaplayer.amp.MediaDownloadCompleted
  - uid: azuremediaplayer.amp.MediaDownloadDecrypted
    name: MediaDownloadDecrypted
    spec.typeScript:
      - name: MediaDownloadDecrypted
        fullName: MediaDownloadDecrypted
        uid: azuremediaplayer.amp.MediaDownloadDecrypted
  - uid: azuremediaplayer.amp.MediaDownloadFailed
    name: MediaDownloadFailed
    spec.typeScript:
      - name: MediaDownloadFailed
        fullName: MediaDownloadFailed
        uid: azuremediaplayer.amp.MediaDownloadFailed
  - uid: azuremediaplayer.amp.MediaDownload
    name: MediaDownload
    spec.typeScript:
      - name: MediaDownload
        fullName: MediaDownload
        uid: azuremediaplayer.amp.MediaDownload
  - uid: azuremediaplayer.amp.MainProgram
    name: MainProgram
    spec.typeScript:
      - name: MainProgram
        fullName: MainProgram
        uid: azuremediaplayer.amp.MainProgram
  - uid: azuremediaplayer.amp.Splice
    name: Splice
    spec.typeScript:
      - name: Splice
        fullName: Splice
        uid: azuremediaplayer.amp.Splice
  - uid: 'azuremediaplayer.amp.Clip[]'
    name: 'Clip[]'
    spec.typeScript:
      - name: Clip
        fullName: Clip
        uid: azuremediaplayer.amp.Clip
      - name: '[]'
        fullName: '[]'
  - uid: 'azuremediaplayer.amp.AdElement[]'
    name: 'AdElement[]'
    spec.typeScript:
      - name: AdElement
        fullName: AdElement
        uid: azuremediaplayer.amp.AdElement
      - name: '[]'
        fullName: '[]'
  - uid: 'azuremediaplayer.amp.VideoTrack[]'
    name: 'VideoTrack[]'
    spec.typeScript:
      - name: VideoTrack
        fullName: VideoTrack
        uid: azuremediaplayer.amp.VideoTrack
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.VideoStream
    name: VideoStream
    spec.typeScript:
      - name: VideoStream
        fullName: VideoStream
        uid: azuremediaplayer.amp.VideoStream
  - uid: 'azuremediaplayer.amp.VideoStream[]'
    name: 'VideoStream[]'
    spec.typeScript:
      - name: VideoStream
        fullName: VideoStream
        uid: azuremediaplayer.amp.VideoStream
      - name: '[]'
        fullName: '[]'
  - uid: azuremediaplayer.amp.VideoTrack
    name: VideoTrack
    spec.typeScript:
      - name: VideoTrack
        fullName: VideoTrack
        uid: azuremediaplayer.amp.VideoTrack
  - uid: azuremediaplayer.amp.XMLHttpRequestWrapper
    name: XMLHttpRequestWrapper
    spec.typeScript:
      - name: XMLHttpRequestWrapper
        fullName: XMLHttpRequestWrapper
        uid: azuremediaplayer.amp.XMLHttpRequestWrapper
  - uid: azuremediaplayer.amp.Player.addEventListener
    name: addEventListener
  - uid: azuremediaplayer.amp.Player.addMidRoll
    name: addMidRoll
  - uid: azuremediaplayer.amp.Player.audioBufferData
    name: audioBufferData
  - uid: azuremediaplayer.amp.Player.autoplay_1
    name: autoplay_1
  - uid: azuremediaplayer.amp.Player.autoplay
    name: autoplay
  - uid: azuremediaplayer.amp.Player.buffered
    name: buffered
  - uid: azuremediaplayer.amp.Player.canControlPlaybackRate
    name: canControlPlaybackRate
  - uid: azuremediaplayer.amp.Player.controls_1
    name: controls_1
  - uid: azuremediaplayer.amp.Player.controls
    name: controls
  - uid: azuremediaplayer.amp.Player.currentAbsoluteTime
    name: currentAbsoluteTime
  - uid: azuremediaplayer.amp.Player.currentAbsoluteTime_1
    name: currentAbsoluteTime_1
  - uid: azuremediaplayer.amp.Player.currentAudioStreamList
    name: currentAudioStreamList
  - uid: azuremediaplayer.amp.Player.currentClip
    name: currentClip
  - uid: azuremediaplayer.amp.Player.currentDownloadBitrate
    name: currentDownloadBitrate
  - uid: azuremediaplayer.amp.Player.currentHeuristicProfile_1
    name: currentHeuristicProfile_1
  - uid: azuremediaplayer.amp.Player.currentHeuristicProfile
    name: currentHeuristicProfile
  - uid: azuremediaplayer.amp.Player.currentMediaTime
    name: currentMediaTime
  - uid: azuremediaplayer.amp.Player.currentPlayableWindow
    name: currentPlayableWindow
  - uid: azuremediaplayer.amp.Player.currentPlaybackBitrate
    name: currentPlaybackBitrate
  - uid: azuremediaplayer.amp.Player.currentPlayerSettingValue
    name: currentPlayerSettingValue
  - uid: azuremediaplayer.amp.Player.currentProtectionInfo
    name: currentProtectionInfo
  - uid: azuremediaplayer.amp.Player.currentSrc
    name: currentSrc
  - uid: azuremediaplayer.amp.Player.currentTechName
    name: currentTechName
  - uid: azuremediaplayer.amp.Player.currentTime_1
    name: currentTime_1
  - uid: azuremediaplayer.amp.Player.currentTime
    name: currentTime
  - uid: azuremediaplayer.amp.Player.currentType
    name: currentType
  - uid: azuremediaplayer.amp.Player.currentVideoStreamList
    name: currentVideoStreamList
  - uid: azuremediaplayer.amp.Player.disableTextTracks
    name: disableTextTracks
  - uid: azuremediaplayer.amp.Player.dispose
    name: dispose
  - uid: azuremediaplayer.amp.Player.downloadableMedia
    name: downloadableMedia
  - uid: azuremediaplayer.amp.Player.downloadableMedia_1
    name: downloadableMedia_1
  - uid: azuremediaplayer.amp.Player.duration
    name: duration
  - uid: azuremediaplayer.amp.Player.ended
    name: ended
  - uid: azuremediaplayer.amp.Player.enterFullscreen
    name: enterFullscreen
  - uid: azuremediaplayer.amp.Player.error
    name: error
  - uid: azuremediaplayer.amp.Player.exitFullscreen
    name: exitFullscreen
  - uid: azuremediaplayer.amp.Player.fromPresentationTime
    name: fromPresentationTime
  - uid: azuremediaplayer.amp.Player.getAmpVersion
    name: getAmpVersion
  - uid: azuremediaplayer.amp.Player.getCurrentTextTrack
    name: getCurrentTextTrack
  - uid: azuremediaplayer.amp.Player.getMemoryLog
    name: getMemoryLog
  - uid: azuremediaplayer.amp.Player.height
    name: height
  - uid: azuremediaplayer.amp.Player.height_1
    name: height_1
  - uid: azuremediaplayer.amp.Player.isFullscreen
    name: isFullscreen
  - uid: azuremediaplayer.amp.Player.isLive
    name: isLive
  - uid: azuremediaplayer.amp.Player.manifestPlayableWindowLength
    name: manifestPlayableWindowLength
  - uid: azuremediaplayer.amp.Player.muted_1
    name: muted_1
  - uid: azuremediaplayer.amp.Player.muted
    name: muted
  - uid: azuremediaplayer.amp.Player.options_1
    name: options_1
  - uid: azuremediaplayer.amp.Player.options
    name: options
  - uid: azuremediaplayer.amp.Player.pause
    name: pause
  - uid: azuremediaplayer.amp.Player.paused
    name: paused
  - uid: azuremediaplayer.amp.Player.play
    name: play
  - uid: azuremediaplayer.amp.Player.playbackRate
    name: playbackRate
  - uid: azuremediaplayer.amp.Player.playbackRate_1
    name: playbackRate_1
  - uid: azuremediaplayer.amp.Player.playerElement
    name: playerElement
  - uid: azuremediaplayer.amp.Player.playlist_1
    name: playlist_1
  - uid: azuremediaplayer.amp.Player.playlist
    name: playlist
  - uid: azuremediaplayer.amp.Player.poster_1
    name: poster_1
  - uid: azuremediaplayer.amp.Player.poster
    name: poster
  - uid: azuremediaplayer.amp.Player.presentationLayout
    name: presentationLayout
  - uid: azuremediaplayer.amp.Player.presentationLayout_1
    name: presentationLayout_1
  - uid: azuremediaplayer.amp.Player.presentationTimeOffsetInSec
    name: presentationTimeOffsetInSec
  - uid: azuremediaplayer.amp.Player.ready
    name: ready
  - uid: azuremediaplayer.amp.Player.removeEventListener
    name: removeEventListener
  - uid: azuremediaplayer.amp.Player.seeking
    name: seeking
  - uid: azuremediaplayer.amp.Player.segmentBoundaries
    name: segmentBoundaries
  - uid: azuremediaplayer.amp.Player.setActiveTextTrack
    name: setActiveTextTrack
  - uid: azuremediaplayer.amp.Player.setXmlHttpRequestFactory
    name: setXmlHttpRequestFactory
  - uid: azuremediaplayer.amp.Player.spliceWaiting
    name: spliceWaiting
  - uid: azuremediaplayer.amp.Player.src
    name: src
  - uid: azuremediaplayer.amp.Player.src_1
    name: src_1
  - uid: azuremediaplayer.amp.Player.textTracks
    name: textTracks
  - uid: azuremediaplayer.amp.Player.toPresentationTime
    name: toPresentationTime
  - uid: azuremediaplayer.amp.Player.videoBufferData
    name: videoBufferData
  - uid: azuremediaplayer.amp.Player.videoHeight
    name: videoHeight
  - uid: azuremediaplayer.amp.Player.videoWidth
    name: videoWidth
  - uid: azuremediaplayer.amp.Player.volume_1
    name: volume_1
  - uid: azuremediaplayer.amp.Player.volume
    name: volume
  - uid: azuremediaplayer.amp.Player.width
    name: width
  - uid: azuremediaplayer.amp.Player.width_1
    name: width_1
